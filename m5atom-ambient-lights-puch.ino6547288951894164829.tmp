#include <WiFi.h>
#include <Adafruit_NeoPixel.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "FireEffect.cpp"

#define neopixelPin 27
#define neopixelNum 1
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(neopixelNum, neopixelPin, NEO_GRB + NEO_KHZ800);

bool pin25Runs = false;
void (*pin25LoopFunction)();
void (*pin25ResetFunction)();

// Replace with your network credentials
const char *ssid = "AmbientLights";
const char *password = "000494806711";

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>

<head>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Ambient Lights</title>
    <style>
        * {
            box-sizing: border-box;
        }

        :root {
            --dark-blue: 31, 54, 61;
            --grapefruit: 255, 113, 91;
            --apple: 153, 194, 77;
            --sky: 137, 210, 220;
            --eggplant: 117, 79, 91;
            --gree: #2A3439;
        }

        body {
            color: var(--gree);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            margin: 0;
            padding: 0;
            width: 100%%;
            max-width: 100vw;
            overflow-x: hidden;
            background: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.3)) rgba(var(--sky), 0.4);
            height: 100vh;
        }

        .card {
            margin-top: 15px;
            max-width: 100%%;
            border-radius: 7px;
            padding: 1rem;
            width: 60vw;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
            transition: 0.4s ease;
            background: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.1)) rgba(var(--grapefruit), 0.6);
        }

        .card h3 {
            letter-spacing: 1.1px;
            margin-top: 0;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gree);
            text-align: center;
        }

        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
        }

        .flex-justify-row {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }

        input[type="number"],
        select {
            width: 100%%;
            padding: 12px 20px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        input[type="submit"] {
            letter-spacing: 1.1px;
            width: 100%%;
            background-color: #4caf50;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            margin-left: 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        input[type="button"] {
            letter-spacing: 1.1px;
            width: 100%%;
            background-color: #f44336;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            margin-right: 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        input[type="submit"]:hover {
            background-color: #45a049;
        }

        @media (max-width: 950px) {
            .card {
                background-color: white;
                width: calc(100vw - 30px);
            }
        }

        /* clock */

        button[data-setter] {
            outline: none;
            background: transparent;
            border: none;
            font-weight: 300;
            font-size: 18px;
            width: 25px;
            height: 30px;
            color: #2A3439;
            cursor: pointer;
        }

        button[data-setter]:hover {
            opacity: 0.5;
        }

        .container {
            position: relative;
            margin: 0 auto;
        }

        .setters {
            position: absolute;
            left: 85px;
            top: 75px;
        }

        .minutes-set {
            float: left;
            margin-right: 28px;
        }

        .seconds-set {
            float: right;
        }

        .circle {
            justify-content: center;
            display: flex;
            position: relative;
        }

        .controls {
            position: absolute;
            left: 50%%;
            top: 50%%;
            text-align: center;
            transform: translate(-50%%, -50%%);
        }

        .display-remain-time {
            font-family: 'Roboto';
            font-weight: 100;
            font-size: 43px;
            color: #2A3439;
        }

        #pause {
            outline: none;
            background: transparent;
            border: none;
            margin-top: 10px;
            width: 50px;
            height: 50px;
            position: relative;
        }

        .play::before {
            display: block;
            content: "";
            position: absolute;
            top: 8px;
            left: 16px;
            border-top: 15px solid transparent;
            border-bottom: 15px solid transparent;
            border-left: 22px solid #2A3439;
        }

        .pause::after {
            content: "";
            position: absolute;
            top: 8px;
            left: 12px;
            width: 15px;
            height: 30px;
            background-color: transparent;
            border-radius: 1px;
            border: 5px solid #2A3439;
            border-top: none;
            border-bottom: none;
        }

        #pause:hover {
            opacity: 0.8;
        }

        .e-c-base {
            fill: none;
            stroke: #B6B6B6;
            stroke-width: 4px
        }

        .e-c-progress {
            fill: none;
            stroke: #2A3439;
            stroke-width: 4px;
            transition: stroke-dashoffset 0.7s;
        }

        .e-c-pointer {
            fill: #FFF;
            stroke: #2A3439;
            stroke-width: 2px;
        }

        #e-pointer {
            transition: transform 0.7s;
        }

        #timeAmount {
            display: none;
        }

        #timeRepeats {
            color: #2A3439;
            position: absolute;
            font-size: 20px;
            left: 50%%;
            top: calc(100%% + 15px);
            transform: translate(-50%%, -50%%);
        }

        .fa-icons {
            height: 30px;
            width: auto;
        }

        .dashboard-row {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
        }

        .dashboard-col {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .col-icon,
        .col-switch {
            width: 10%%;
        }

        .col-pin {
            width: 30%%;
        }

        .col-number {
            width: 15%%;
        }

        .col-effect {
            width: 50%%;
        }

        .col-pin,
        .col-effect,
        .col-number {
            justify-content: flex-start;
        }

        .hidden {
            transition: 200ms ease;
            height: 0;
            overflow: hidden;
        }

        .shown {
            transition: 200ms ease;
            height: unset;
        }

        button {
            transition: color 50ms ease;
            outline: none;
            background: transparent;
            border: none;
            font-weight: 300;
            font-size: 18px;
            cursor: pointer;
        }

        button:active {
            color: rgb(var(--apple));
        }
    </style>
</head>

<body>
    <div class="card">
        <div id="dataContainer">
            <h3>Dashboard</h3>
            <div class="card-content">
                <div class="dashboard-row shown">
                    <div class="dashboard-col col-pin">BedLights</div>
                    <div class="dashboard-col col-effect">Ambient Fire</div>
                    <div class="dashboard-col col-switch">
                    
                        <button class="button" id="switchOn">
                          <svg class="fa-icons" aria-hidden="true" focusable="false" data-prefix="fas"
                              data-icon="power-off" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                              <path fill="currentColor"
                                  d="M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z">
                              </path>
                          </svg>
                        </button>

                    
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <h3>Change Light</h3>
        <div class="card-content">
            <form id="effectForm" action="/" method="GET">
                <div class="dashboard-row shown">
                    <div class="dashboard-col col-number">
                        <input type="number" id="led_count" name="led_count" value="150"/>
                    </div>
                    <div class="dashboard-col col-number">
                        <select name="selected_pin" id="selected_pin">
                            <option value="19">19</option>
                            <option value="21">21</option>
                            <option value="22">22</option>
                            <option value="23">23</option>
                            <option value="25" selected>25</option>
                            <option value="33">33</option>
                        </select>
                    </div>
                    <div class="dashboard-col col-effect">
                        <select name="selected_effect" id="selected_effect">
                            <option value="fire" selected>Ambient Fire</option>
                        </select>
                    </div>
                    <div class="dashboard-col col-switch">
                        <button type="submit">
                            <svg class="fa-icons" aria-hidden="true" focusable="false" data-prefix="fas"
                                data-icon="arrow-up" role="img" xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 448 512">
                                <path fill="currentColor"
                                    d="M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z">
                                </path>
                            </svg>
                        </button>
                    </div>
                </div>
            </form>
        </div>

    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var gateway = `ws://${window.location.hostname}/ws`;
            var websocket;

            var effects = [];

            function initWebSocket() {
                console.log("Trying to open a WebSocket connection...");
                websocket = new WebSocket(gateway);
                websocket.onopen = onOpen;
                websocket.onclose = onClose;
                websocket.onmessage = onMessage; // <-- add this line
            }

            function onOpen(event) {
                console.log("Connection opened");
            }

            function onClose(event) {
                console.log("Connection closed");
                setTimeout(initWebSocket, 2000);
            }

            function onMessage(event) {
                console.log(event.data);
                let timeData = JSON.parse(event.data);
                let container = document.getElementById("dataContainer");
                container.dataset.timeAmount = timeData.data.timeAmount;
                container.dataset.timeRepeats = timeData.data.timeRepeats;
                container.dataset.timeRemaining = timeData.data.timeRemaining;
            }

            window.addEventListener("load", onLoad);
            function onLoad(event) {
                initWebSocket();
            }

            document.getElementById("switchOn").addEventListener("click", () => {
              websocket.send("command=stopEffect;selected_pin=25;")
                
            });

            document.getElementById("effectForm").addEventListener("submit", (e) => {
                e.preventDefault();
                //if (e.target.elements.time.value == "" || e.target.elements.repeats.value == "") return;
                console.log("command=updateEffect;led_count=" + e.target.elements.led_count.value + ";selected_pin=" + e.target.elements.selected_pin.value + ";selected_effect="+e.target.elements.selected_effect.value);
                websocket.send("command=updateEffect;led_count=" + e.target.elements.led_count.value + ";selected_pin=" + e.target.elements.selected_pin.value + ";selected_effect="+e.target.elements.selected_effect.value + ";")
                //websocket.send("command=start;time=" + e.target.elements.time.value + ";repeats=" + e.target.elements.repeats.value + ";");
            });
        });
    </script>
</body>

</html>
)rawliteral";

// Set web server port number to 80
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

// Variable to store the HTTP request
String header;

// Assign output variables to GPIO pins
#define PIN_BUZZER 21
#define PIN_BTN 39

// Program state for led color
enum ProgrammState
{
  STARTING,
  WAITING,
  REPEATING
};
ProgrammState programmState = STARTING;

class ClientWsArguments
{
public:
  enum CACommand
  {
    stopEffect,
    updateEffect,
    none
  };

  CACommand command = none;
  int selectedPin = 0;
  int led_count = 0;
  String effect = "";
  
  ClientWsArguments(String msg)
  {
    while (msg.length() > 0)
    {
      int idxCommand = msg.indexOf(';');
      if (idxCommand == -1 || idxCommand == 0)
        break;
      String m = msg.substring(0, idxCommand);
      String m1 = m.substring(0, msg.indexOf('='));
      String m2 = m.substring(msg.indexOf('=') + 1);
      if (m1 == "command")
      {
        if (m2 == "updateEffect")
        {
          command = updateEffect;
        }
        else if(m2 == "stopEffect")
        {
          command = stopEffect;
        }
      }
      else if (m1 == "led_count")
      {
        led_count = m2.toInt();
      }
      else if (m1 == "selected_pin")
      {
        selectedPin = m2.toInt();
      }
      else if (m1 == "selected_effect")
      {
        effect = m2;
          Serial.println("selected_effect");
      }

      msg.remove(0, idxCommand + 1);
    }
  }
};

void notifyClients()
{
  //ws.textAll(String("{ \"data\": { \"timeAmount\": " + String(counterTime) + ", \"timeRepeats\": " + String(repeats - isrCounter) + ", \"timeRemaining\": " + String(counterTimeRemaining) + ", \"programState\":" + String(programmState) + " }}"));
}
void handleWebSocketMessage(void *arg, uint8_t *data, size_t len)
{
  AwsFrameInfo *info = (AwsFrameInfo *)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT)
  {
    String msg = "";

    for (size_t i = 0; i < info->len; i++)
    {
      msg += (char)data[i];
    }
    Serial.println(msg);
    ClientWsArguments ca(msg);
    if(ca.command == ClientWsArguments::CACommand::updateEffect)
    {
      startEffect(ca.selectedPin, ca.led_count, ca.effect);
    }
    else if(ca.command == ClientWsArguments::CACommand::stopEffect)
    {
      stopEffect(ca.selectedPin);
    }
    //if (ca.command == ClientWsArguments::CACommand::START)

    notifyClients();
  }
}



void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
  switch (type)
  {
  case WS_EVT_CONNECT:
    Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
    break;
  case WS_EVT_DISCONNECT:
    Serial.printf("WebSocket client #%u disconnected\n", client->id());
    break;
  case WS_EVT_DATA:
    handleWebSocketMessage(arg, data, len);
    break;
  case WS_EVT_PONG:
  case WS_EVT_ERROR:
    break;
  }
}

void initWebSocket()
{
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}

String processor(const String &var)
{
  //if (var == "TIMEERAMOUNT")
  //{
    //return String(counterTime);
  //}

  return var;
}

void setupWebsocket()
{
  setProgrammStateColor();

  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  initWebSocket();

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send_P(200, "text/html", index_html, processor); });

  // Start server
  server.begin();
  programmState = WAITING;
  setProgrammStateColor();
}

void loopWebsocket()
{
  ws.cleanupClients();
}

void setProgrammStateColor()
{
  switch (programmState)
  {
  case STARTING:
    staticColor(0, 0, 255);
    break;
  case WAITING:
    staticColor(0, 255, 0);
    break;
  case REPEATING:
    staticColor(255, 0, 0);
    break;
  }
}

void staticColor(int r, int g, int b)
{
  pixels.setPixelColor(neopixelNum, pixels.Color(r, g, b));
  pixels.show();
}

// ----------------------------------------------------
Effect activeEffect;

void setup() {
  Serial.begin(115200);
  setupWebsocket();
  activeEffect.setup();
}

void loop() {
  activeEffect.updateEffect();
  loopWebsocket();
}

// ----------------------------------------------------

void updateEffects()
{
  if(pin25Runs)
  {
    pin25LoopFunction();
  }
}


void stopEffect(int pin)
{
  activeEffect.stopEffect();
  activeEffect = Effect();
}

void startEffect(int pin, int led_count, String effect)
{
  Serial.print(effect);
  Serial.println(" started");
  
  if(effect == "fire")
  {
    activeEffect = FireEffect("Ambient Fire", 150);
    
  }
}
